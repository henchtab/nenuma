{"version":3,"file":"index-DFCTwyZH.js","sources":["../../../../../../node_modules/.pnpm/@sveltejs+kit@2.5.18_@sveltejs+vite-plugin-svelte@3.1.1_svelte@5.0.0-next.166_vite@5.3.3_@typ_l7s4kbzeuezsxg5pbotw34oaba/node_modules/@sveltejs/kit/src/exports/index.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.5.18_@sveltejs+vite-plugin-svelte@3.1.1_svelte@5.0.0-next.166_vite@5.3.3_@typ_l7s4kbzeuezsxg5pbotw34oaba/node_modules/@sveltejs/kit/src/runtime/control.js"],"sourcesContent":["import { HttpError, Redirect, ActionFailure } from '../runtime/control.js';\nimport { BROWSER, DEV } from 'esm-env';\n\nexport { VERSION } from '../version.js';\n\n// TODO 3.0: remove these types as they are not used anymore (we can't remove them yet because that would be a breaking change)\n/**\n * @template {number} TNumber\n * @template {any[]} [TArray=[]]\n * @typedef {TNumber extends TArray['length'] ? TArray[number] : LessThan<TNumber, [...TArray, TArray['length']]>} LessThan\n */\n\n/**\n * @template {number} TStart\n * @template {number} TEnd\n * @typedef {Exclude<TEnd | LessThan<TEnd>, LessThan<TStart>>} NumericRange\n */\n\n// Keep the status codes as `number` because restricting to certain numbers makes it unnecessarily hard to use compared to the benefits\n// (we have runtime errors already to check for invalid codes). Also see https://github.com/sveltejs/kit/issues/11780\n\n// we have to repeat the JSDoc because the display for function overloads is broken\n// see https://github.com/microsoft/TypeScript/issues/55056\n\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {App.Error} body An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @overload\n * @param {number} status\n * @param {App.Error} body\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} [body] An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @overload\n * @param {number} status\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} [body]\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} body An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\nexport function error(status, body) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 400 || status > 599)) {\n\t\tthrow new Error(`HTTP error status codes must be between 400 and 599 â€” ${status} is invalid`);\n\t}\n\n\tthrow new HttpError(status, body);\n}\n\n/**\n * Checks whether this is an error thrown by {@link error}.\n * @template {number} T\n * @param {unknown} e\n * @param {T} [status] The status to filter for.\n * @return {e is (HttpError & { status: T extends undefined ? never : T })}\n */\nexport function isHttpError(e, status) {\n\tif (!(e instanceof HttpError)) return false;\n\treturn !status || e.status === status;\n}\n\n/**\n * Redirect a request. When called during request handling, SvelteKit will return a redirect response.\n * Make sure you're not catching the thrown redirect, which would prevent SvelteKit from handling it.\n * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | ({} & number)} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages). Must be in the range 300-308.\n * @param {string | URL} location The location to redirect to.\n * @throws {Redirect} This error instructs SvelteKit to redirect to the specified location.\n * @throws {Error} If the provided status is invalid.\n * @return {never}\n */\nexport function redirect(status, location) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 300 || status > 308)) {\n\t\tthrow new Error('Invalid status code');\n\t}\n\n\tthrow new Redirect(\n\t\t// @ts-ignore\n\t\tstatus,\n\t\tlocation.toString()\n\t);\n}\n\n/**\n * Checks whether this is a redirect thrown by {@link redirect}.\n * @param {unknown} e The object to check.\n * @return {e is Redirect}\n */\nexport function isRedirect(e) {\n\treturn e instanceof Redirect;\n}\n\n/**\n * Create a JSON `Response` object from the supplied data.\n * @param {any} data The value that will be serialized as JSON.\n * @param {ResponseInit} [init] Options such as `status` and `headers` that will be added to the response. `Content-Type: application/json` and `Content-Length` headers will be added automatically.\n */\nexport function json(data, init) {\n\t// TODO deprecate this in favour of `Response.json` when it's\n\t// more widely supported\n\tconst body = JSON.stringify(data);\n\n\t// we can't just do `text(JSON.stringify(data), init)` because\n\t// it will set a default `content-type` header. duplicated code\n\t// means less duplicated work\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-length')) {\n\t\theaders.set('content-length', encoder.encode(body).byteLength.toString());\n\t}\n\n\tif (!headers.has('content-type')) {\n\t\theaders.set('content-type', 'application/json');\n\t}\n\n\treturn new Response(body, {\n\t\t...init,\n\t\theaders\n\t});\n}\n\nconst encoder = new TextEncoder();\n\n/**\n * Create a `Response` object from the supplied body.\n * @param {string} body The value that will be used as-is.\n * @param {ResponseInit} [init] Options such as `status` and `headers` that will be added to the response. A `Content-Length` header will be added automatically.\n */\nexport function text(body, init) {\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-length')) {\n\t\tconst encoded = encoder.encode(body);\n\t\theaders.set('content-length', encoded.byteLength.toString());\n\t\treturn new Response(encoded, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\treturn new Response(body, {\n\t\t...init,\n\t\theaders\n\t});\n}\n\n/**\n * Create an `ActionFailure` object.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @overload\n * @param {number} status\n * @returns {import('./public.js').ActionFailure<undefined>}\n */\n/**\n * Create an `ActionFailure` object.\n * @template {Record<string, unknown> | undefined} [T=undefined]\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {T} data Data associated with the failure (e.g. validation errors)\n * @overload\n * @param {number} status\n * @param {T} data\n * @returns {import('./public.js').ActionFailure<T>}\n */\n/**\n * Create an `ActionFailure` object.\n * @param {number} status\n * @param {any} [data]\n * @returns {import('./public.js').ActionFailure<any>}\n */\nexport function fail(status, data) {\n\t// @ts-expect-error unique symbol missing\n\treturn new ActionFailure(status, data);\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\n/**\n * This is a grotesque hack that, in dev, allows us to replace the implementations\n * of these classes that you'd get by importing them from `@sveltejs/kit` with the\n * ones that are imported via Vite and loaded internally, so that instanceof\n * checks work even though SvelteKit imports this module via Vite and consumers\n * import it via Node\n * @param {{\n *   ActionFailure: typeof ActionFailure;\n *   HttpError: typeof HttpError;\n *   Redirect: typeof Redirect;\n *   SvelteKitError: typeof SvelteKitError;\n * }} implementations\n */\nexport function replace_implementations(implementations) {\n\t// @ts-expect-error\n\tActionFailure = implementations.ActionFailure; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tHttpError = implementations.HttpError; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tRedirect = implementations.Redirect; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tSvelteKitError = implementations.SvelteKitError; // eslint-disable-line no-class-assign\n}\n"],"names":["text"],"mappings":"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"}