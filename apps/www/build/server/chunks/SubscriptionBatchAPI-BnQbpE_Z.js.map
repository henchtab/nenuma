{"version":3,"file":"SubscriptionBatchAPI-BnQbpE_Z.js","sources":["../../../../src/routes/playground/streams-api/components/SubscriptionBatchAPI.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { formatOutputDate } from '$lib/utils';\n  import { useSubscriptioBatch } from '$lib/wrappers';\n  import { fromNano } from '@ton/core';\n  import { writable } from 'svelte/store';\n  import Output from '../../components/Output.svelte';\n  import Section from './Section.svelte';\n  import { toast } from 'svelte-sonner';\n\n  const batchId = writable(0);\n  const batch = useSubscriptioBatch(batchId);\n\n  let output = $state<{ date: string; message: string }[]>([]);\n</script>\n\n<Section title=\"Subscription Batch\">\n  <Label class=\"grid gap-2 mt-4\">\n    Batch ID\n    <Input type=\"number\" placeholder=\"0\" required min=\"0\" class=\"w-fit\" bind:value={$batchId} />\n  </Label>\n  <p class=\"mt-3 mb-8 text-ds-gray-900 max-w-[768px]\">\n    Subscription Batch is a smart contract that handles subscription management for data streams on\n    the blockchain. It lets publishers manage multiple subscriptions, track remaining notifications,\n    and handle deposits. Key features include adding new subscriptions, topping up existing ones,\n    and publishing data (like candlesticks). It also ensures that subscribers receive timely\n    notifications and that publishers cover costs efficiently. <br /> <br /> For more details, you\n    can explore the\n    <a\n      class=\"underline\"\n      href=\"https://github.com/dreamqip/nenuma/blob/main/contracts/contracts/subscription_batch.tact\"\n      target=\"_blank\">contract code</a\n    > and its functionality.\n  </p>\n\n  <div class=\"flex mt-8 gap-4 items-end overflow-x-auto snap-x snap-mandatory pb-6\">\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        try {\n          const result = await $batch.getBalance();\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: JSON.stringify(`${fromNano(result)} TON`, null, 2)\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            if (error.message.includes('-256')) {\n              toast.error(`Subscription Batch with id ${$batchId} not found. Did you deploy it?`);\n            }\n          }\n        }\n      }}>Get Balance</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        try {\n          const result = await $batch.getBatchId();\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: JSON.stringify(result.toString(), null, 2)\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            if (error.message.includes('-256')) {\n              toast.error(`Subscription Batch with id ${$batchId} not found. Did you deploy it?`);\n            }\n          }\n        }\n      }}>Get Batch ID</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        try {\n          const result = await $batch.getStreamAddress();\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: JSON.stringify(result.toString({ testOnly: true, bounceable: false }), null, 2)\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            if (error.message.includes('-256')) {\n              toast.error(`Subscription Batch with id ${$batchId} not found. Did you deploy it?`);\n            }\n          }\n        }\n      }}>Get Stream Address</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        try {\n          const result = await $batch.getSubscriptions();\n\n          const subscriptions: {\n            [key: string]: {\n              remainingNotificationsCount: string;\n            };\n          }[] = [];\n          for (const [address, info] of result) {\n            subscriptions.push({\n              [address.toString({ testOnly: true, bounceable: false })]: {\n                remainingNotificationsCount: info.remainingNotificationsCount.toString()\n              }\n            });\n          }\n\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: JSON.stringify(subscriptions, null, 2)\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            if (error.message.includes('-256')) {\n              toast.error(`Subscription Batch with id ${$batchId} not found. Did you deploy it?`);\n            }\n          }\n        }\n      }}>Get Subscriptions</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        try {\n          const result = await $batch.getSubscriptionsCount();\n\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: JSON.stringify(result.toString(), null, 2)\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            if (error.message.includes('-256')) {\n              toast.error(`Subscription Batch with id ${$batchId} not found. Did you deploy it?`);\n            }\n          }\n        }\n      }}>Get Subscriptions Count</Button\n    >\n  </div>\n\n  <Output bind:output />\n</Section>\n"],"names":["$.store_get"],"mappings":"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"}