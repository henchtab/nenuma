{"version":3,"file":"_page.svelte-tEIfGFSl.js","sources":["../../../../src/routes/playground/streams-api/deploy/+page.svelte","../../../../src/routes/playground/streams-api/deploy/components/SimpleSubscriberForm.svelte","../../../../src/routes/playground/streams-api/deploy/components/PublishCandlestickForm.svelte","../../../../src/routes/playground/streams-api/deploy/components/SessionForm.svelte","../../../../src/routes/playground/streams-api/deploy/components/BatchForm.svelte","../../../../src/routes/playground/streams-api/deploy/components/StreamForm.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { backButton } from '$lib/stores/tma';\n  import { page } from '$app/stores';\n  import { onMount } from 'svelte';\n  import { BatchForm, PublishCandlestickForm, SessionForm, SimpleSubscriberForm, StreamForm } from './components';\n  import { derived } from 'svelte/store';\n\n  type ComponentKey = keyof ComponentMap;\n\n  // Define the contract to component mapping type\n  type ComponentMap = {\n    stream: typeof StreamForm;\n    batch: typeof BatchForm;\n    session: typeof SessionForm;\n    candlestick: typeof PublishCandlestickForm;\n    subscriber: typeof SimpleSubscriberForm;\n  };\n\n  const contractToComponent: ComponentMap = {\n    stream: StreamForm,\n    batch: BatchForm,\n    session: SessionForm,\n    candlestick: PublishCandlestickForm,\n    subscriber: SimpleSubscriberForm\n  };\n\n  const contractType = derived(page, ($page) => {\n    const type = $page.url.searchParams.get('contract') || 'stream';\n\n    return (type in contractToComponent ? type : 'stream') as ComponentKey;\n  });\n\n  const title = $page.url.searchParams.get('title') || 'Fill out the form';\n  const subtitle = $page.url.searchParams.get('subtitle') || '';\n\n  onMount(() => {\n    $backButton.show();\n\n    const unsubscribe = $backButton.on('click', () => {\n      history.back();\n    });\n\n    return () => {\n      unsubscribe();\n      $backButton.hide();\n    };\n  });\n</script>\n\n<svelte:head>\n  <title>Deploy {title}</title>\n  <meta name=\"description\" content=\"Fill out the form below to deploy your own {subtitle}.\" />\n  <meta name=\"robots\" content=\"noindex, nofollow\" />\n</svelte:head>\n\n<div class=\"bg-ds-background-100 border-b\">\n  <div class=\"container py-6 grid gap-1.5\">\n    <h1 class=\"text-lg font-medium text-center text-balance\">\n      Deploy {title}\n    </h1>\n    <p class=\"text-ds-gray-900 text-center text-balance\">\n      Fill out the form below to deploy your own {subtitle}.\n    </p>\n  </div>\n</div>\n\n<svelte:component this={contractToComponent[$contractType]} />\n","<script lang=\"ts\">\n  import { browser } from '$app/environment';\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { hapticFeedback, mainButton } from '$lib/stores/tma';\n  import { randomize } from '$lib/utils';\n  import { createSimpleSubscriber } from '$lib/wrappers';\n  import { onDestroy } from 'svelte';\n  import { writable } from 'svelte/store';\n\n  const simpleSubscriber = createSimpleSubscriber();\n\n  let form = $state<HTMLFormElement>();\n  let subscriberId = $state<number>(0);\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Simple Subscriber').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => form?.requestSubmit());\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onDestroy(() => {\n    if (browser) {\n      $mainButton.hide().disable();\n    }\n  });\n\n  async function handleDeploySSSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const args = {\n      stream: formData.get('stream') as string,\n      notificationsCount: BigInt(formData.get('notificationsCount') as string),\n      expiresAt: BigInt(new Date(formData.get('exp') as string).getTime() / 1000),\n      subscriberId: BigInt(formData.get('subscriberId') as string)\n    };\n\n    await $simpleSubscriber.deploy(args);\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleDeploySSSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label class=\"flex flex-col gap-2\">Stream Address</Label>\n    <Input\n      type=\"text\"\n      name=\"stream\"\n      placeholder=\"0QDCiYqpPo9esMDX35_BWYcsR1NKS7lbnPcPF6IMH8MNx2Lj\"\n      required\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label class=\"flex flex-col gap-2\">Notifications Count</Label>\n    <Input type=\"number\" name=\"notificationsCount\" placeholder=\"777\" required min=\"0\" />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"exp\" class=\"w-fit\">Expiration Time</Label>\n    <Input\n      id=\"exp\"\n      type=\"datetime-local\"\n      name=\"exp\"\n      required\n      onchange={() => $hapticFeedback.selectionChanged()}\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"subscriberId\" class=\"w-fit\">Subscriber ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"subscriberId\"\n        type=\"number\"\n        name=\"subscriberId\"\n        placeholder=\"101\"\n        required\n        bind:value={subscriberId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (subscriberId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { browser } from '$app/environment';\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { mainButton } from '$lib/stores/tma';\n  import { randomize } from '$lib/utils';\n  import { createDataStream } from '$lib/wrappers';\n  import { onDestroy } from 'svelte';\n  import { writable } from 'svelte/store';\n\n  const searchParams = $page.url.searchParams;\n\n  const streamAddress = searchParams.get('streamAddress') || '';\n  const stream = createDataStream(writable(streamAddress));\n\n  let form = $state<HTMLFormElement>();\n  let queryId = $state<number>(0);\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Publish Candlestick').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => form?.requestSubmit());\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onDestroy(() => {\n    if (browser) {\n      $mainButton.hide().disable();\n    }\n  });\n\n  async function handlePublishCandlestickSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const start = formData.get('start');\n    const end = formData.get('end');\n    const open = formData.get('open');\n    const high = formData.get('high');\n    const low = formData.get('low');\n    const close = formData.get('close');\n\n    if (start && end && open && high && low && close) {\n      const candlestick = {\n        start: BigInt(start as string),\n        end: BigInt(end as string),\n        open: BigInt(open as string),\n        high: BigInt(high as string),\n        low: BigInt(low as string),\n        close: BigInt(close as string)\n      };\n\n      const args = {\n        candlestick,\n        queryId: BigInt(formData.get('queryId') as string)\n      };\n\n      await $stream.publishCandlestick(args);\n    }\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-1 flex-col gap-4\"\n  onsubmit={handlePublishCandlestickSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"start\" class=\"w-fit\">Start</Label>\n    <Input id=\"start\" type=\"number\" name=\"start\" placeholder=\"1718207640\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"end\" class=\"w-fit\">End</Label>\n    <Input id=\"end\" type=\"number\" name=\"end\" placeholder=\"1718207699\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label id=\"open\" class=\"w-fit\">Open</Label>\n    <Input id=\"open\" type=\"number\" name=\"open\" placeholder=\"6969709\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"high\" class=\"w-fit\">High</Label>\n    <Input id=\"high\" type=\"number\" name=\"high\" placeholder=\"6969774\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"low\" class=\"w-fit\">Low</Label>\n    <Input id=\"low\" type=\"number\" name=\"low\" placeholder=\"6970129\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"close\" class=\"w-fit\">Close</Label>\n    <Input id=\"close\" type=\"number\" name=\"close\" placeholder=\"6966979\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { randomize } from '$lib/utils';\n\n  import { mainButton } from '$lib/stores/tma';\n  import { createDataStream } from '$lib/wrappers';\n  import { writable } from 'svelte/store';\n  import { onDestroy } from 'svelte';\n  import { browser } from '$app/environment';\n\n  const searchParams = $page.url.searchParams;\n\n  const streamAddress = searchParams.get('streamAddress') || '';\n  const stream = createDataStream(writable(streamAddress));\n\n  let form = $state<HTMLFormElement>();\n  let queryId = $state<number>(0);\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Session').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => form?.requestSubmit());\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onDestroy(() => {\n    if (browser) {\n      $mainButton.hide().disable();\n    }\n  });\n\n  async function handleDeploySessionSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const args = {\n      queryId: BigInt(formData.get('queryId') as string)\n    };\n\n    await $stream.deploySession(args);\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleDeploySessionSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { randomize } from '$lib/utils';\n\n  import { mainButton } from '$lib/stores/tma';\n  import { createDataStream } from '$lib/wrappers';\n  import { writable } from 'svelte/store';\n  import { onDestroy } from 'svelte';\n  import { browser } from '$app/environment';\n\n  const searchParams = $page.url.searchParams;\n\n  const streamAddress = searchParams.get('streamAddress') || '';\n  const stream = createDataStream(writable(streamAddress));\n\n  let form = $state<HTMLFormElement>();\n  let queryId = $state<number>(0);\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Batch').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => form?.requestSubmit());\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onDestroy(() => {\n    if (browser) {\n      $mainButton.hide().disable();\n    }\n  });\n\n  async function handleDeployBatchSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const args = {\n      queryId: BigInt(formData.get('queryId') as string)\n    };\n\n    await $stream.deploySubscriptionBatch(args);\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleDeployBatchSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { hapticFeedback, mainButton } from '$lib/stores/tma';\n  import { randomize } from '$lib/utils';\n  import { createDataStream } from '$lib/wrappers';\n  import { onMount } from 'svelte';\n  import { toast } from 'svelte-sonner';\n  import { withWalletConnection } from '$lib/with-wallet-connection';\n\n  const stream = createDataStream();\n\n  let form = $state<HTMLFormElement>();\n\n  let queryId = $state<number>();\n\n  onMount(() => {\n    let unsubscribe: (() => void) | undefined;\n\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Stream').enable().show();\n\n      unsubscribe = $mainButton.on('click', () => {\n        $hapticFeedback.impactOccurred('heavy');\n        form?.requestSubmit();\n      });\n    }\n\n    return () => {\n      unsubscribe?.();\n      $mainButton.hide().disable();\n    };\n  });\n\n  async function handleDeploySubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n\n    const args = {\n      topic: formData.get('topic') as string,\n      queryId: BigInt(formData.get('queryId') as string)\n    };\n\n    try {\n      await $stream.deploy(args);\n      toast.success('The stream deployment transaction is on its way');\n    } catch (error) {\n      if (error instanceof Error) {\n        toast.error(error.message);\n      }\n    }\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={(e) => withWalletConnection(() => handleDeploySubmit(e))}\n>\n  <div class=\"grid gap-2\">\n    <Label class=\"w-fit\">Topic</Label>\n    <Input type=\"text\" name=\"topic\" placeholder=\"1.candlestick.TONUSDT\" required />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n</form>\n"],"names":["$.store_get","$.escape","$page"],"mappings":"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"}