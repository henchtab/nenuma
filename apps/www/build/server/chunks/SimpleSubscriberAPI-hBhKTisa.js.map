{"version":3,"file":"SimpleSubscriberAPI-hBhKTisa.js","sources":["../../../../src/routes/playground/streams-api/components/SimpleSubscriberAPI.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { formatOutputDate } from '$lib/utils';\n  import { createSimpleSubscriber } from '$lib/wrappers';\n  import { fromNano } from '@ton/core';\n  import { writable } from 'svelte/store';\n  import Output from '../../components/Output.svelte';\n  import Section from './Section.svelte';\n\n  const simpleSubscriberAddress = writable('');\n  const simpleSubscriber = createSimpleSubscriber(simpleSubscriberAddress);\n\n  let output = $state<{ date: string; message: string }[]>([]);\n\n  async function handleCheckTimeoutSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const args = {\n      queryId: BigInt(formData.get('queryId') as string)\n    };\n\n    await $simpleSubscriber.checkTimeout(args);\n  }\n</script>\n\n<Section title=\"Simple Subscriber\">\n  <Label class=\"grid gap-2 mt-4\">\n    Simple Subscriber Address\n    <Input\n      type=\"text\"\n      name=\"simpleSubscriberAddress\"\n      placeholder=\"0QDCiYqpPo9esMDX35_BWYcsR1NKS7lbnPcPF6IMH8MNx2Lj\"\n      required\n      class=\"w-fit\"\n      bind:value={$simpleSubscriberAddress}\n    />\n  </Label>\n  <p class=\"mt-3 mb-8 text-ds-gray-900 max-w-[768px]\">\n    This contract sets up with an owner address and a subscriber ID. It handles subscriptions to a\n    data stream, making sure there are enough funds for operations. When deployment requests come\n    in, it sets the stream address, notification count, and expiration time. You can check the\n    balance, owner address, number of notifications, expiration time, stream address, session\n    address, and the latest candlestick data. It deals with subscribing, unsubscribing, and\n    destroying sessions, even if transactions bounce. It also checks for expired subscriptions and\n    notifies when time is up. Overall, it keeps the subscription process smooth and organized.\n  </p>\n  <div class=\"flex gap-4 items-end overflow-x-auto pb-6 snap-x snap-mandatory\">\n    <a\n      class=\"snap-start\"\n      href={`/playground/streams-api/deploy?contract=subscriber&title=${encodeURIComponent('Simple Subscriber')}&subtitle=simple subscriber`}\n    >\n      <Button class=\"bg-ds-green-800 text-white hover:bg-ds-green-700\"\n        >Deploy Simple Subscriber\n      </Button>\n    </a>\n\n    <form class=\"flex snap-start flex-col gap-4 min-w-max\" onsubmit={handleCheckTimeoutSubmit}>\n      <Label class=\"flex flex-col gap-2\"\n        >Query ID\n        <Input type=\"number\" name=\"queryId\" placeholder=\"777\" required min=\"0\" />\n      </Label>\n      <Button class=\"bg-ds-green-800 text-white hover:bg-ds-green-700\" type=\"submit\"\n        >Check timeout</Button\n      >\n    </form>\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getBalance();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(`${fromNano(result)} TON`, null, 2)\n        });\n      }}>Get Balance</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getOwnerAddress();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result.toString({ testOnly: true, bounceable: false }), null, 2)\n        });\n      }}>Get Owner Address</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getNotificationsCount();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result?.toString(), null, 2)\n        });\n      }}>Get Notifications Count</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getExpiresAt();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result?.toString(), null, 2)\n        });\n      }}>Get Expires At</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getStreamAddress();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result?.toString({ testOnly: true, bounceable: false }), null, 2)\n        });\n      }}>Get Stream Address</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getSessionAddress();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result?.toString({ testOnly: true, bounceable: false }), null, 2)\n        });\n      }}>Get Session Address</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 snap-start text-white hover:bg-ds-blue-700\"\n      onclick={async () => {\n        const result = await $simpleSubscriber.getLatestCandlestick();\n\n        if (!result) {\n          output.unshift({\n            date: formatOutputDate(new Date()),\n            message: 'No candlestick found'\n          });\n          return;\n        }\n\n        const serialized = {\n          start: result.start.toString(),\n          end: result.end.toString(),\n          open: result.open.toString(),\n          high: result.high.toString(),\n          low: result.low.toString(),\n          close: result.close.toString()\n        };\n\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(serialized, null, 2)\n        });\n      }}>Get Latest Candlestick</Button\n    >\n  </div>\n  \n  <Output bind:output />\n</Section>\n"],"names":["$.attr"],"mappings":"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"}