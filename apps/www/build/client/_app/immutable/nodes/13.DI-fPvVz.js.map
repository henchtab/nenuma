{"version":3,"file":"13.DI-fPvVz.js","sources":["../../../../../../src/routes/playground/options-api/deploy/+page.svelte","../../../../../../../../node_modules/.pnpm/@melt-ui+svelte@0.76.2_svelte@5.0.0-next.166/node_modules/@melt-ui/svelte/dist/internal/helpers/rovingFocus.js","../../../../../../../../node_modules/.pnpm/@melt-ui+svelte@0.76.2_svelte@5.0.0-next.166/node_modules/@melt-ui/svelte/dist/builders/toggle-group/create.js","../../../../../../../../node_modules/.pnpm/bits-ui@0.21.12_svelte@5.0.0-next.166/node_modules/bits-ui/dist/bits/toggle-group/ctx.js","../../../../../../../../node_modules/.pnpm/bits-ui@0.21.12_svelte@5.0.0-next.166/node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group.svelte","../../../../../../../../node_modules/.pnpm/bits-ui@0.21.12_svelte@5.0.0-next.166/node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group-item.svelte","../../../../../../src/lib/components/ui/toggle-group/toggle-group.svelte","../../../../../../src/lib/components/ui/toggle/index.ts","../../../../../../src/lib/components/ui/toggle-group/toggle-group-item.svelte","../../../../../../src/lib/components/ui/toggle-group/index.ts","../../../../../../src/routes/playground/options-api/deploy/components/BrokerOptionForm.svelte","../../../../../../src/routes/playground/options-api/deploy/components/BrokerDepositForm.svelte","../../../../../../src/routes/playground/options-api/deploy/components/OptionForm.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { backButton } from '$lib/stores/tma';\n  import { page } from '$app/stores';\n  import { onMount } from 'svelte';\n  import { BrokerOptionForm, BrokerDepositForm, OptionForm } from './components';\n  import { derived } from 'svelte/store';\n\n  type ComponentKey = keyof ComponentMap;\n\n  // Define the contract to component mapping type\n  type ComponentMap = {\n    brokerOption: typeof BrokerOptionForm;\n    brokerDeposit: typeof BrokerDepositForm;\n    option: typeof OptionForm;\n  };\n\n  const contractToComponent: ComponentMap = {\n    brokerOption: BrokerOptionForm,\n    brokerDeposit: BrokerDepositForm,\n    option: OptionForm\n  };\n\n  const contractType = derived(page, ($page) => {\n    const type = $page.url.searchParams.get('contract') || 'option';\n\n    return (type in contractToComponent ? type : 'option') as ComponentKey;\n  });\n\n  const title = $page.url.searchParams.get('title') || 'Fill out the form';\n  // TODO: What to do with subtitle?\n  const subtitle = $page.url.searchParams.get('subtitle') || '';\n  const shouldForceTitle = $page.url.searchParams.get('forceTitle') === 'true';\n\n  onMount(() => {\n    $backButton.show();\n\n    const unsubscribe = $backButton.on('click', () => {\n      history.back();\n    });\n\n    return () => {\n      unsubscribe();\n      $backButton.hide();\n    };\n  });\n</script>\n\n<svelte:head>\n  <title>\n    {shouldForceTitle ? title : `Deploy ${title}`}\n  </title>\n  <meta name=\"robots\" content=\"noindex, nofollow\" />\n</svelte:head>\n\n<div class=\"bg-ds-background-100 border-b\">\n  <div class=\"container py-6 grid gap-1.5\">\n    <h1 class=\"text-lg font-medium text-center text-balance\">\n      {shouldForceTitle ? title : `Deploy ${title}`}\n    </h1>\n    <p class=\"text-ds-gray-900 text-center text-balance\">Fill out the form below</p>\n  </div>\n</div>\n\n<svelte:component this={contractToComponent[$contractType]} />\n","import { isBrowser, isHTMLElement } from './is.js';\nimport { sleep } from './sleep.js';\n/**\n * Manage roving focus between elements. Sets the current active element to\n * tabindex -1 and the next element to tabindex 0.\n *\n * @param nextElement The element to focus on\n */\nexport function handleRovingFocus(nextElement) {\n    if (!isBrowser)\n        return;\n    sleep(1).then(() => {\n        const currentFocusedElement = document.activeElement;\n        if (!isHTMLElement(currentFocusedElement) || currentFocusedElement === nextElement)\n            return;\n        currentFocusedElement.tabIndex = -1;\n        if (nextElement) {\n            nextElement.tabIndex = 0;\n            nextElement.focus();\n        }\n    });\n}\nfunction getFocusableElements() {\n    return Array.from(document.querySelectorAll('a[href]:not([tabindex=\"-1\"]), button:not([disabled]):not([tabindex=\"-1\"]), input:not([disabled]):not([tabindex=\"-1\"]), select:not([disabled]):not([tabindex=\"-1\"]), textarea:not([disabled]):not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"])'));\n}\nexport function getNextFocusable(currentElement) {\n    const focusableElements = getFocusableElements();\n    const currentIndex = focusableElements.indexOf(currentElement);\n    const nextIndex = currentIndex + 1;\n    const nextElement = focusableElements[nextIndex];\n    if (nextIndex < focusableElements.length && isHTMLElement(nextElement)) {\n        return nextElement;\n    }\n    return null;\n}\nexport function getPreviousFocusable(currentElement) {\n    const focusableElements = getFocusableElements();\n    const currentIndex = focusableElements.indexOf(currentElement);\n    const previousIndex = currentIndex - 1;\n    const prevElement = focusableElements[previousIndex];\n    if (previousIndex >= 0 && isHTMLElement(prevElement)) {\n        return prevElement;\n    }\n    return null;\n}\n","import { addMeltEventListener, makeElement, createElHelpers, disabledAttr, executeCallbacks, getElemDirection, handleRovingFocus, isHTMLElement, kbd, noop, omit, overridable, toWritableStores, } from '../../internal/helpers/index.js';\nimport { derived, writable } from 'svelte/store';\nconst defaults = {\n    type: 'single',\n    orientation: 'horizontal',\n    loop: true,\n    rovingFocus: true,\n    disabled: false,\n    defaultValue: '',\n};\nconst { name, selector } = createElHelpers('toggle-group');\nexport const createToggleGroup = (props) => {\n    const withDefaults = { ...defaults, ...props };\n    const options = toWritableStores(omit(withDefaults, 'value'));\n    const { type, orientation, loop, rovingFocus, disabled } = options;\n    const defaultValue = withDefaults.defaultValue\n        ? withDefaults.defaultValue\n        : withDefaults.type === 'single'\n            ? undefined\n            : [];\n    const valueWritable = withDefaults.value ?? writable(defaultValue);\n    const value = overridable(valueWritable, withDefaults?.onValueChange);\n    const root = makeElement(name(), {\n        stores: orientation,\n        returned: ($orientation) => {\n            return {\n                role: 'group',\n                'data-orientation': $orientation,\n            };\n        },\n    });\n    const item = makeElement(name('item'), {\n        stores: [value, disabled, orientation, type],\n        returned: ([$value, $disabled, $orientation, $type]) => {\n            return (props) => {\n                const itemValue = typeof props === 'string' ? props : props.value;\n                const argDisabled = typeof props === 'string' ? false : !!props.disabled;\n                const disabled = $disabled || argDisabled;\n                const pressed = Array.isArray($value) ? $value.includes(itemValue) : $value === itemValue;\n                const isSingle = $type === 'single';\n                const isMultiple = $type === 'multiple' || $type === undefined;\n                return {\n                    disabled: disabledAttr(disabled),\n                    pressed,\n                    'data-orientation': $orientation,\n                    'data-disabled': disabledAttr(disabled),\n                    'data-state': pressed ? 'on' : 'off',\n                    'data-value': itemValue,\n                    'aria-pressed': isMultiple ? pressed : undefined,\n                    'aria-checked': isSingle ? pressed : undefined,\n                    type: 'button',\n                    role: isSingle ? 'radio' : undefined,\n                    tabindex: pressed ? 0 : -1,\n                };\n            };\n        },\n        action: (node) => {\n            let unsub = noop;\n            const parentGroup = node.closest(selector());\n            if (!isHTMLElement(parentGroup))\n                return {};\n            const items = Array.from(parentGroup.querySelectorAll(selector('item')));\n            const $value = value.get();\n            const anyPressed = Array.isArray($value) ? $value.length > 0 : $value ? true : false;\n            if (!anyPressed && items[0] === node) {\n                node.tabIndex = 0;\n            }\n            function getNodeProps() {\n                const itemValue = node.dataset.value;\n                const disabled = node.dataset.disabled === 'true';\n                return { value: itemValue, disabled };\n            }\n            function handleValueUpdate() {\n                const { value: itemValue, disabled } = getNodeProps();\n                if (itemValue === undefined || disabled)\n                    return;\n                value.update(($value) => {\n                    if (Array.isArray($value)) {\n                        if ($value.includes(itemValue)) {\n                            return $value.filter((i) => i !== itemValue);\n                        }\n                        return [...$value, itemValue];\n                    }\n                    return $value === itemValue ? undefined : itemValue;\n                });\n            }\n            unsub = executeCallbacks(addMeltEventListener(node, 'click', () => {\n                handleValueUpdate();\n            }), addMeltEventListener(node, 'keydown', (e) => {\n                if (e.key === kbd.SPACE || e.key === kbd.ENTER) {\n                    e.preventDefault();\n                    handleValueUpdate();\n                    return;\n                }\n                if (!rovingFocus.get())\n                    return;\n                const el = e.currentTarget;\n                if (!isHTMLElement(el))\n                    return;\n                const root = el.closest(selector());\n                if (!isHTMLElement(root))\n                    return;\n                const items = Array.from(root.querySelectorAll(selector('item') + ':not([data-disabled])')).filter((item) => isHTMLElement(item));\n                const currentIndex = items.indexOf(el);\n                const dir = getElemDirection(el);\n                const $orientation = orientation.get();\n                const nextKey = {\n                    horizontal: dir === 'rtl' ? kbd.ARROW_LEFT : kbd.ARROW_RIGHT,\n                    vertical: kbd.ARROW_DOWN,\n                }[$orientation ?? 'horizontal'];\n                const prevKey = {\n                    horizontal: dir === 'rtl' ? kbd.ARROW_RIGHT : kbd.ARROW_LEFT,\n                    vertical: kbd.ARROW_UP,\n                }[$orientation ?? 'horizontal'];\n                const $loop = loop.get();\n                if (e.key === nextKey) {\n                    e.preventDefault();\n                    const nextIndex = currentIndex + 1;\n                    if (nextIndex >= items.length && $loop) {\n                        handleRovingFocus(items[0]);\n                    }\n                    else {\n                        handleRovingFocus(items[nextIndex]);\n                    }\n                }\n                else if (e.key === prevKey) {\n                    e.preventDefault();\n                    const prevIndex = currentIndex - 1;\n                    if (prevIndex < 0 && $loop) {\n                        handleRovingFocus(items[items.length - 1]);\n                    }\n                    else {\n                        handleRovingFocus(items[prevIndex]);\n                    }\n                }\n                else if (e.key === kbd.HOME) {\n                    e.preventDefault();\n                    handleRovingFocus(items[0]);\n                }\n                else if (e.key === kbd.END) {\n                    e.preventDefault();\n                    handleRovingFocus(items[items.length - 1]);\n                }\n            }));\n            return {\n                destroy: unsub,\n            };\n        },\n    });\n    const isPressed = derived(value, ($value) => {\n        return (itemValue) => {\n            return Array.isArray($value) ? $value.includes(itemValue) : $value === itemValue;\n        };\n    });\n    return {\n        elements: {\n            root,\n            item,\n        },\n        states: {\n            value,\n        },\n        helpers: {\n            isPressed,\n        },\n        options,\n    };\n};\n","import { createToggleGroup } from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\nimport { createBitAttrs, getOptionUpdater, removeUndefined } from \"../../internal/index.js\";\nfunction getToggleGroupData() {\n    const NAME = \"toggle-group\";\n    const PARTS = [\"root\", \"item\"];\n    return {\n        NAME,\n        PARTS,\n    };\n}\nexport function setCtx(props) {\n    const { NAME, PARTS } = getToggleGroupData();\n    const getAttrs = createBitAttrs(NAME, PARTS);\n    const toggleGroup = { ...createToggleGroup(removeUndefined(props)), getAttrs };\n    setContext(NAME, toggleGroup);\n    return {\n        ...toggleGroup,\n        updateOption: getOptionUpdater(toggleGroup.options),\n    };\n}\nexport function getCtx() {\n    const { NAME } = getToggleGroupData();\n    return getContext(NAME);\n}\n","<script>import { melt } from \"@melt-ui/svelte\";\nimport { setCtx } from \"../ctx.js\";\nimport { arraysAreEqual } from \"../../../internal/arrays.js\";\nexport let type = \"single\";\nexport let disabled = void 0;\nexport let loop = void 0;\nexport let value = void 0;\nexport let orientation = void 0;\nexport let onValueChange = void 0;\nexport let asChild = false;\nexport let el = void 0;\nconst {\n  elements: { root },\n  states: { value: localValue },\n  updateOption,\n  getAttrs\n} = setCtx({\n  disabled,\n  type,\n  defaultValue: value,\n  loop,\n  orientation,\n  onValueChange: ({ next }) => {\n    if (Array.isArray(next)) {\n      if (!Array.isArray(value) || !arraysAreEqual(value, next)) {\n        onValueChange?.(next);\n        value = next;\n        return next;\n      }\n      return next;\n    }\n    if (value !== next) {\n      onValueChange?.(next);\n      value = next;\n    }\n    return next;\n  }\n});\nconst attrs = getAttrs(\"root\");\n$:\n  value !== void 0 && localValue.set(Array.isArray(value) ? [...value] : value);\n$:\n  updateOption(\"disabled\", disabled);\n$:\n  updateOption(\"loop\", loop);\n$:\n  updateOption(\"type\", type);\n$:\n  updateOption(\"orientation\", orientation);\n$:\n  builder = $root;\n$:\n  Object.assign(builder, attrs);\n</script>\n\n{#if asChild}\n\t<slot {builder} />\n{:else}\n\t<div bind:this={el} {...builder} use:builder.action {...$$restProps}>\n\t\t<slot {builder} />\n\t</div>\n{/if}\n","<script>import { melt } from \"@melt-ui/svelte\";\nimport { getCtx } from \"../ctx.js\";\nimport { createDispatcher } from \"../../../internal/index.js\";\nexport let value;\nexport let disabled = false;\nexport let asChild = false;\nexport let el = void 0;\nconst {\n  elements: { item },\n  getAttrs\n} = getCtx();\nconst dispatch = createDispatcher();\nconst attrs = getAttrs(\"item\");\n$:\n  builder = $item({ value, disabled });\n$:\n  Object.assign(builder, attrs);\n</script>\n\n{#if asChild}\n\t<slot {builder} />\n{:else}\n\t<button\n\t\tbind:this={el}\n\t\t{...builder} use:builder.action\n\t\t{...$$restProps}\n\t\ton:m-click={dispatch}\n\t\ton:m-keydown={dispatch}\n\t>\n\t\t<slot {builder} />\n\t</button>\n{/if}\n","<script lang=\"ts\">\n\timport type { VariantProps } from \"tailwind-variants\";\n\timport { ToggleGroup as ToggleGroupPrimitive } from \"bits-ui\";\n\timport { setToggleGroupCtx } from \"./index.js\";\n\timport type { toggleVariants } from \"$lib/components/ui/toggle/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype T = $$Generic<\"single\" | \"multiple\">;\n\ttype $$Props = ToggleGroupPrimitive.Props<T> & VariantProps<typeof toggleVariants>;\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let variant: $$Props[\"variant\"] = \"default\";\n\texport let size: $$Props[\"size\"] = \"default\";\n\texport let value: $$Props[\"value\"] = undefined;\n\n\tsetToggleGroupCtx({\n\t\tvariant,\n\t\tsize,\n\t});\n</script>\n\n<ToggleGroupPrimitive.Root\n\tclass={cn(\"flex items-center border rounded-md w-fit justify-center\", className)}\n\tbind:value\n\t{...$$restProps}\n\tlet:builder\n>\n\t<slot {builder} />\n</ToggleGroupPrimitive.Root>\n","import { type VariantProps, tv } from 'tailwind-variants';\nimport Root from './toggle.svelte';\n\nexport const toggleVariants = tv({\n  base: 'inline-flex items-center border-r first:rounded-l-md last:border-r-0 last:rounded-r-md justify-center text-sm font-medium transition-colors hover:bg-ds-gray-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ds-gray-600 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-ds-blue-200 data-[state=on]:text-ds-blue-900',\n  variants: {\n    variant: {\n      default: 'bg-transparent'\n    },\n    size: {\n      default: 'h-9 px-3',\n      sm: 'h-8 px-2',\n      lg: 'h-10 px-3'\n    }\n  },\n  defaultVariants: {\n    variant: 'default',\n    size: 'default'\n  }\n});\n\nexport type Variant = VariantProps<typeof toggleVariants>['variant'];\nexport type Size = VariantProps<typeof toggleVariants>['size'];\n\nexport {\n  Root,\n  //\n  Root as Toggle\n};\n","<script lang=\"ts\">\n\timport { ToggleGroup as ToggleGroupPrimitive } from \"bits-ui\";\n\timport { type ToggleVariants, getToggleGroupCtx } from \"./index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { toggleVariants } from \"$lib/components/ui/toggle/index.js\";\n\n\ttype $$Props = ToggleGroupPrimitive.ItemProps & ToggleVariants;\n\n\tlet className: string | undefined | null = undefined;\n\n\texport { className as class };\n\texport let variant: $$Props[\"variant\"] = \"default\";\n\texport let size: $$Props[\"size\"] = \"default\";\n\texport let value: $$Props[\"value\"];\n\n\tconst ctx = getToggleGroupCtx();\n</script>\n\n<ToggleGroupPrimitive.Item\n\tclass={cn(\n\t\ttoggleVariants({\n\t\t\tvariant: ctx.variant || variant,\n\t\t\tsize: ctx.size || size,\n\t\t}),\n\t\tclassName\n\t)}\n\t{value}\n\t{...$$restProps}\n>\n\t<slot />\n</ToggleGroupPrimitive.Item>\n","import type { VariantProps } from \"tailwind-variants\";\nimport { getContext, setContext } from \"svelte\";\nimport Root from \"./toggle-group.svelte\";\nimport Item from \"./toggle-group-item.svelte\";\nimport type { toggleVariants } from \"$lib/components/ui/toggle/index.js\";\n\nexport type ToggleVariants = VariantProps<typeof toggleVariants>;\n\nexport function setToggleGroupCtx(props: ToggleVariants) {\n\tsetContext(\"toggleGroup\", props);\n}\n\nexport function getToggleGroupCtx() {\n\treturn getContext<ToggleVariants>(\"toggleGroup\");\n}\n\nexport {\n\tRoot,\n\tItem,\n\t//\n\tRoot as ToggleGroup,\n\tItem as ToggleGroupItem,\n};\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import * as ToggleGroup from '$lib/components/ui/toggle-group';\n  import { hapticFeedback, mainButton } from '$lib/stores/tma';\n  import { formatTime, randomize } from '$lib/utils';\n  import { useBroker } from '$lib/wrappers';\n  import { Address, toNano } from '@ton/core';\n  import ChevronDown from 'lucide-svelte/icons/chevron-down';\n  import TrendingDown from 'lucide-svelte/icons/trending-down';\n  import TrendingUp from 'lucide-svelte/icons/trending-up';\n  import { onMount } from 'svelte';\n  import { toast } from 'svelte-sonner';\n  import { writable } from 'svelte/store';\n\n  const searchParams = $page.url.searchParams;\n  const brokerAddress = searchParams.get('broker') || '';\n\n  const broker = useBroker(writable(brokerAddress));\n\n  let form = $state<HTMLFormElement>();\n\n  let queryId = $state<number>();\n  let initiation = $state(initiationTime(3));\n  let optionType = $state<string>();\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Option').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => {\n        form?.requestSubmit();\n        $hapticFeedback.impactOccurred('heavy');\n      });\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onMount(() => {\n    const interval = setInterval(() => {\n      if (initiation < initiationTime(3)) {\n        initiation = initiationTime(3);\n      }\n    }, 1000 * 30);\n\n    return () => {\n      $mainButton.hide().disable();\n      clearInterval(interval);\n    };\n  });\n\n  function initiationTime(numberOfMinutes: number) {\n    return formatTime(new Date(Date.now() + 1000 * 60 * numberOfMinutes));\n  }\n\n  async function handleSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    formData.set('optionType', optionType as string);\n\n    for (const [_, value] of formData) {\n      if (!value) {\n        $hapticFeedback.notificationOccurred('error');\n        toast.error('Please fill in all the fields');\n        return;\n      }\n    }\n\n    const intitiationTime = formData.get('initiation') as string;\n    const initiation = BigInt(\n      new Date(`${new Date().toDateString()} ${intitiationTime}`).getTime() / 1000\n    );\n\n    try {\n      const args = {\n        queryId: BigInt(formData.get('queryId') as string),\n        draft: {\n          holder: Address.parse((formData.get('holder') as string).trim()),\n          initiation,\n          expiration: BigInt(initiation + BigInt(formData.get('expiration') as string) * 60n),\n          optionType: Boolean(formData.get('optionType') as string),\n          investment: toNano(formData.get('investment') as string)\n        }\n      };\n\n      await $broker.deployOption(args);\n    } catch (error) {\n      $hapticFeedback.notificationOccurred('error');\n\n      console.log(error);\n\n      if (error instanceof Error) {\n        toast.error(error.message);\n      } else {\n        toast.error('An error occurred while deploying the option');\n      }\n    }\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"holder\" class=\"w-fit\">Holder</Label>\n    <Input\n      id=\"holder\"\n      type=\"text\"\n      name=\"holder\"\n      placeholder=\"0QAXeOTnpkBx_A6zKVxAYNDYqNuWPyrZkYZySJRZ_-zV4gLV\"\n      required\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"initiation\" class=\"w-fit\">Initiation</Label>\n    <Input\n      id=\"initiation\"\n      type=\"time\"\n      name=\"initiation\"\n      min={initiation}\n      bind:value={initiation}\n      required\n      onchange={() => $hapticFeedback.selectionChanged()}\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"expiration\" class=\"w-fit\">Expiration</Label>\n    <div class=\"relative flex items-center\">\n      <select\n        class=\"flex h-9 w-full rounded-md border bg-transparent px-3 py-1 text-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-ds-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ds-gray-600 disabled:cursor-not-allowed disabled:opacity-50 appearance-none\"\n        id=\"expiration\"\n        name=\"expiration\"\n        required\n        onchange={() => $hapticFeedback.selectionChanged()}\n      >\n        <option value=\"2\">2 minutes</option>\n        <option value=\"3\">3 minutes</option>\n        <option value=\"4\">4 minutes</option>\n        <option value=\"5\">5 minutes</option>\n      </select>\n      <ChevronDown size={16} stroke-width={1.5} class=\"absolute right-2 text-ds-gray-900\" />\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"optionType\" class=\"w-fit\">Option Type</Label>\n    <ToggleGroup.Root\n      type=\"single\"\n      id=\"optionType\"\n      aria-required\n      bind:value={optionType}\n      onValueChange={() => $hapticFeedback.selectionChanged()}\n    >\n      <ToggleGroup.Item value=\"true\">\n        <TrendingUp size={16} stroke-width={1.5} class=\"mr-2\" />\n        Call\n      </ToggleGroup.Item>\n      <ToggleGroup.Item value=\"false\">\n        <TrendingDown size={16} stroke-width={1.5} class=\"mr-2\" />\n        Put\n      </ToggleGroup.Item>\n    </ToggleGroup.Root>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"investment\" class=\"w-fit\">Investment</Label>\n    <div class=\"relative flex items-center\">\n      <Input\n        class=\"pr-12\"\n        id=\"investment\"\n        type=\"number\"\n        name=\"investment\"\n        placeholder=\"100\"\n        step=\"any\"\n        required\n      />\n      <span class=\"absolute right-3 select-none text-sm font-medium text-ds-gray-1000\">TON</span>\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { hapticFeedback, mainButton } from '$lib/stores/tma';\n  import { formatTime, randomize } from '$lib/utils';\n  import { useBroker } from '$lib/wrappers';\n  import { toNano } from '@ton/core';\n  import { onMount } from 'svelte';\n  import { toast } from 'svelte-sonner';\n  import { writable } from 'svelte/store';\n\n  const searchParams = $page.url.searchParams;\n  const brokerAddress = searchParams.get('broker') || '';\n\n  const broker = useBroker(writable(brokerAddress));\n\n  let form = $state<HTMLFormElement>();\n\n  let queryId = $state<number>();\n  let initiation = $state(initiationTime(3));\n  let optionType = $state<string>();\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deposit').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => {\n        form?.requestSubmit();\n        $hapticFeedback.impactOccurred('heavy');\n      });\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onMount(() => {\n    const interval = setInterval(() => {\n      if (initiation < initiationTime(3)) {\n        initiation = initiationTime(3);\n      }\n    }, 1000 * 30);\n\n    return () => {\n      $mainButton.hide().disable();\n      clearInterval(interval);\n    };\n  });\n\n  function initiationTime(numberOfMinutes: number) {\n    return formatTime(new Date(Date.now() + 1000 * 60 * numberOfMinutes));\n  }\n\n  async function handleSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    formData.set('optionType', optionType as string);\n\n    for (const [_, value] of formData) {\n      if (!value) {\n        $hapticFeedback.notificationOccurred('error');\n        toast.error('Please fill in all the fields');\n        return;\n      }\n    }\n\n    try {\n      const args = {\n        queryId: BigInt(formData.get('queryId') as string),\n        deposit : toNano(formData.get('deposit') as string)\n      };\n\n      await $broker.deposit(args);\n    } catch (error) {\n      $hapticFeedback.notificationOccurred('error');\n\n      console.log(error);\n\n      if (error instanceof Error) {\n        toast.error(error.message);\n      } else {\n        toast.error('An error occurred while deploying the option');\n      }\n    }\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"deposit\" class=\"w-fit\">Deposit</Label>\n    <div class=\"relative flex items-center\">\n      <Input\n        class=\"pr-12\"\n        id=\"deposit\"\n        type=\"number\"\n        name=\"deposit\"\n        placeholder=\"100\"\n        step=\"any\"\n        required\n      />\n      <span class=\"absolute right-3 select-none text-sm font-medium text-ds-gray-1000\">TON</span>\n    </div>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import * as ToggleGroup from '$lib/components/ui/toggle-group';\n  import { hapticFeedback, mainButton } from '$lib/stores/tma';\n  import { formatTime, randomize } from '$lib/utils';\n  import { createCashOrNothingOption } from '$lib/wrappers';\n  import { Address, toNano } from '@ton/core';\n  import ChevronDown from 'lucide-svelte/icons/chevron-down';\n  import TrendingDown from 'lucide-svelte/icons/trending-down';\n  import TrendingUp from 'lucide-svelte/icons/trending-up';\n  import { onMount } from 'svelte';\n  import { toast } from 'svelte-sonner';\n  import { page } from '$app/stores';\n  import { writable } from 'svelte/store';\n  import { tonConnectUI } from '$lib/stores/ton-connect';\n\n  const searchParams = $page.url.searchParams;\n  const stream = searchParams.get('stream') || '';\n\n  const option = createCashOrNothingOption(writable(stream));\n\n  let form = $state<HTMLFormElement>();\n  let writer = $state<string>();\n\n  let optionId = $state<number>();\n  let queryId = $state<number>();\n  let initiation = $state(initiationTime(3));\n  let optionType = $state<string>();\n\n  $effect(() => {\n    if ($mainButton && form) {\n      $mainButton.setText('Deploy Option').enable().show();\n\n      const unsubscribe = $mainButton.on('click', () => {\n        form?.requestSubmit();\n        $hapticFeedback.impactOccurred('heavy');\n      });\n\n      return unsubscribe;\n    } else {\n      $mainButton.hide().disable();\n    }\n  });\n\n  onMount(() => {\n    if (!$option) {\n      toast.error('There is no option. Please try again');\n    }\n\n    $tonConnectUI.connectionRestored.then(() => {\n      const account = $tonConnectUI.account;\n\n      if (account) {\n        writer = Address.parse(account.address).toString({\n          testOnly: true,\n          bounceable: false\n        });\n      }\n    });\n\n    const interval = setInterval(() => {\n      if (initiation < initiationTime(3)) {\n        initiation = initiationTime(3);\n      }\n    }, 1000 * 30);\n\n    return () => {\n      $mainButton.hide().disable();\n      clearInterval(interval);\n    };\n  });\n\n  function initiationTime(numberOfMinutes: number) {\n    return formatTime(new Date(Date.now() + 1000 * 60 * numberOfMinutes));\n  }\n\n  async function handleSubmit(\n    e: SubmitEvent & {\n      currentTarget: EventTarget & HTMLFormElement;\n    }\n  ) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    formData.set('optionType', optionType as string);\n\n    for (const [_, value] of formData) {\n      if (!value) {\n        $hapticFeedback.notificationOccurred('error');\n        toast.error('Please fill in all the fields');\n        return;\n      }\n    }\n\n    const intitiationTime = formData.get('initiation') as string;\n    const initiation = BigInt(new Date(`${new Date().toDateString()} ${intitiationTime}`).getTime() / 1000);\n\n    try {\n      const args = {\n        optionId: BigInt(formData.get('optionId') as string),\n        queryId: BigInt(formData.get('queryId') as string),\n        agreement: {\n          holder: Address.parse((formData.get('holder') as string).trim()),\n          writer: Address.parse((formData.get('writer') as string).trim()),\n          initiation,\n          expiration: BigInt(initiation + BigInt(formData.get('expiration') as string) * 60n),\n          optionType: Boolean(formData.get('optionType') as string),\n          investment: toNano(formData.get('investment') as string),\n          payout: toNano(formData.get('payout') as string)\n        }\n      };\n\n      await $option.deploy(args);\n    } catch (error) {\n      $hapticFeedback.notificationOccurred('error');\n\n      console.log(error);\n\n      if (error instanceof Error) {\n        toast.error(error.message);\n      } else {\n        toast.error('An error occurred while deploying the option');\n      }\n    }\n  }\n</script>\n\n<form\n  bind:this={form}\n  class=\"flex container py-6 flex-col gap-4 overflow-auto\"\n  onsubmit={handleSubmit}\n>\n  <div class=\"grid gap-2\">\n    <Label for=\"optionId\" class=\"w-fit\">Option ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"optionId\"\n        type=\"number\"\n        name=\"optionId\"\n        placeholder=\"101\"\n        required\n        bind:value={optionId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (optionId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"queryId\" class=\"w-fit\">Query ID</Label>\n    <div\n      class=\"flex relative ring-1 ring-ds-gray-400 rounded-md transition-all duration-300 focus-within:ring-2 focus-within:ring-ds-gray-600\"\n    >\n      <Input\n        id=\"queryId\"\n        type=\"number\"\n        name=\"queryId\"\n        placeholder=\"101\"\n        required\n        bind:value={queryId}\n        class=\"rounded-r-none border-0 border-r focus-visible:ring-0 appearance-none\"\n      />\n      <Button\n        variant=\"secondary\"\n        class=\"text-sm rounded-l-none ring-0\"\n        onclick={() => (queryId = randomize())}>Randomize</Button\n      >\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"holder\" class=\"w-fit\">Holder</Label>\n    <Input\n      id=\"holder\"\n      type=\"text\"\n      name=\"holder\"\n      placeholder=\"0QAXeOTnpkBx_A6zKVxAYNDYqNuWPyrZkYZySJRZ_-zV4gLV\"\n      required\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"writer\" class=\"w-fit\">Writer</Label>\n    <Input\n      id=\"writer\"\n      type=\"text\"\n      name=\"writer\"\n      bind:value={writer}\n      placeholder=\"0QAXeOTnpkBx_A6zKVxAYNDYqNuWPyrZkYZySJRZ_-zV4gLV\"\n      required\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"initiation\" class=\"w-fit\">Initiation</Label>\n    <Input\n      id=\"initiation\"\n      type=\"time\"\n      name=\"initiation\"\n      min={initiation}\n      bind:value={initiation}\n      required\n      onchange={() => $hapticFeedback.selectionChanged()}\n    />\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"expiration\" class=\"w-fit\">Expiration</Label>\n    <div class=\"relative flex items-center\">\n      <select\n        class=\"flex h-9 w-full rounded-md border bg-transparent px-3 py-1 text-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-ds-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ds-gray-600 disabled:cursor-not-allowed disabled:opacity-50 appearance-none\"\n        id=\"expiration\"\n        name=\"expiration\"\n        required\n        onchange={() => $hapticFeedback.selectionChanged()}\n      >\n        <option value=\"2\">2 minutes</option>\n        <option value=\"3\">3 minutes</option>\n        <option value=\"4\">4 minutes</option>\n        <option value=\"5\">5 minutes</option>\n      </select>\n      <ChevronDown size={16} stroke-width={1.5} class=\"absolute right-2 text-ds-gray-900\" />\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"optionType\" class=\"w-fit\">Option Type</Label>\n    <ToggleGroup.Root\n      type=\"single\"\n      id=\"optionType\"\n      aria-required\n      bind:value={optionType}\n      onValueChange={() => $hapticFeedback.selectionChanged()}\n    >\n      <ToggleGroup.Item value=\"true\">\n        <TrendingUp size={16} stroke-width={1.5} class=\"mr-2\" />\n        Call\n      </ToggleGroup.Item>\n      <ToggleGroup.Item value=\"false\">\n        <TrendingDown size={16} stroke-width={1.5} class=\"mr-2\" />\n        Put\n      </ToggleGroup.Item>\n    </ToggleGroup.Root>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"investment\" class=\"w-fit\">Investment</Label>\n    <div class=\"relative flex items-center\">\n      <Input\n        class=\"pr-12\"\n        id=\"investment\"\n        type=\"number\"\n        name=\"investment\"\n        placeholder=\"100\"\n        step=\"any\"\n        required\n      />\n      <span class=\"absolute right-3 select-none text-sm font-medium text-ds-gray-1000\">TON</span>\n    </div>\n  </div>\n\n  <div class=\"grid gap-2\">\n    <Label for=\"payout\" class=\"w-fit\">Payout</Label>\n    <div class=\"relative flex items-center\">\n      <Input\n        class=\"pr-12\"\n        id=\"payout\"\n        type=\"number\"\n        name=\"payout\"\n        placeholder=\"100\"\n        step=\"any\"\n        required\n      />\n      <span class=\"absolute right-3 select-none text-sm font-medium text-ds-gray-1000\">TON</span>\n    </div>\n  </div>\n</form>\n"],"names":["shouldForceTitle","title","$.component","contractToComponent","$contractType","$$component","handleRovingFocus","nextElement","isBrowser","sleep","currentFocusedElement","isHTMLElement","defaults","name","selector","createElHelpers","createToggleGroup","props","withDefaults","options","toWritableStores","omit","type","orientation","loop","rovingFocus","disabled","defaultValue","valueWritable","writable","value","overridable","root","makeElement","$orientation","item","$value","$disabled","$type","itemValue","argDisabled","pressed","isSingle","isMultiple","disabledAttr","node","unsub","noop","parentGroup","items","getNodeProps","handleValueUpdate","i","executeCallbacks","addMeltEventListener","e","kbd","el","currentIndex","dir","getElemDirection","nextKey","prevKey","$loop","nextIndex","prevIndex","isPressed","derived","getToggleGroupData","setCtx","NAME","PARTS","getAttrs","createBitAttrs","toggleGroup","removeUndefined","setContext","getOptionUpdater","getCtx","getContext","onValueChange","asChild","localValue","updateOption","next","arraysAreEqual","_a","_b","attrs","$root","$.get","builder","$.bind_this","div","$$value","$.template_effect","attributes","$.set_attributes","$$restProps","$.prop","$$props","dispatch","createDispatcher","$.set","$item","button","className","variant","size","setToggleGroupCtx","cn","toggleVariants","tv","ctx","getToggleGroupCtx","on_change","_","$hapticFeedback","hapticFeedback","brokerAddress","$page","broker","useBroker","form","$.source","queryId","initiation","$.proxy","initiationTime","optionType","$mainButton","onMount","interval","numberOfMinutes","formatTime","handleSubmit","formData","toast","intitiationTime","args","Address","toNano","$broker","error","randomize","TrendingUp","node_12","TrendingDown","node_14","stream","option","createCashOrNothingOption","writer","optionId","$option","$tonConnectUI","account","node_17","node_19","BrokerOptionForm","BrokerDepositForm","OptionForm","contractType","page","$backButton","unsubscribe"],"mappings":"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"}