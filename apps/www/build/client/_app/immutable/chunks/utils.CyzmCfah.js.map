{"version":3,"file":"utils.CyzmCfah.js","sources":["../../../../../../src/lib/wrappers/utils.ts"],"sourcesContent":["import type { Contract, OpenedContract } from '@ton/core';\n\nexport function saveContractAddress<C extends Contract>(\n  contract: string | C,\n  key: string\n) {\n  try {\n    let address: string;\n\n    if (typeof contract === 'string') {\n      address = contract;\n    } else {\n      address = contract.address.toString({ testOnly: true });\n    }\n\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        address,\n        timestamp: Date.now()\n      })\n    );\n  } catch (error) {\n    if (error instanceof DOMException && error.name === 'QuotaExceededError') {\n      console.error('Failed to save stream address: quota exceeded');\n    }\n  }\n}\n\nexport type AddressData = {\n  address: string;\n  timestamp: number;\n};\n\nexport function loadData<T = any>(key: string): T | null {\n  const item = localStorage.getItem(key);\n  return item ? JSON.parse(item) : null;\n}\n\n// export const bocToHash = (boc: string): string => {\n//   return Cell.fromBase64(boc).hash().toString('base64');\n// };\n\n// const getTransactionsByMessageHash = async (hash: string) => {\n//   const res = await fetch(`/api/transactionsByMessage?hash=${hash}`);\n\n//   if (!res.ok) {\n//     throw new Error('Failed to get transactions by message hash');\n//   }\n\n//   return await res.json();\n// };\n\n// export interface WaitForTransactionOptions {\n//   hash: string;\n//   refetchInterval?: number;\n//   refetchLimit?: number;\n// }\n\n// export async function waitForTransaction(\n//   options: WaitForTransactionOptions\n// ): Promise<Transaction | undefined> {\n//   const { hash, refetchInterval = 1000, refetchLimit = undefined } = options || {};\n\n//   return new Promise((resolve, reject) => {\n//     let refetches = 0;\n\n//     const interval = setInterval(async () => {\n//       refetches += 1;\n\n//       try {\n//         const res = await getTransactionsByMessageHash(hash);\n//         if (res?.transactions.length) {\n//           clearInterval(interval);\n//           resolve(res.transactions[0]);\n//         }\n\n//         if (refetchLimit && refetches >= refetchLimit) {\n//           clearInterval(interval);\n//           resolve(undefined);\n//         }\n//       } catch (error) {\n//         console.error('Failed to get transaction by message hash', error);\n//         clearInterval(interval);\n//         reject(error);\n//       }\n//     }, refetchInterval);\n//   });\n// }\n"],"names":["saveContractAddress","contract","key","address","error","loadData","item"],"mappings":"8VAEgB,SAAAA,EACdC,EACAC,EACA,CACI,GAAA,CACE,IAAAC,EAEA,OAAOF,GAAa,SACZE,EAAAF,EAEVE,EAAUF,EAAS,QAAQ,SAAS,CAAE,SAAU,GAAM,EAG3C,aAAA,QACXC,EACA,KAAK,UAAU,CACb,QAAAC,EACA,UAAW,KAAK,IAAI,CAAA,CACrB,CAAA,QAEIC,EAAO,CACVA,aAAiB,cAAgBA,EAAM,OAAS,sBAClD,QAAQ,MAAM,+CAA+C,CAEjE,CACF,CAOO,SAASC,EAAkBH,EAAuB,CACjD,MAAAI,EAAO,aAAa,QAAQJ,CAAG,EACrC,OAAOI,EAAO,KAAK,MAAMA,CAAI,EAAI,IACnC"}