{"version":3,"file":"BrokerageAccountAPI.DvG39q0-.js","sources":["../../../../../../src/routes/playground/options-api/components/BrokerageAccountAPI.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { formatOutputDate } from '$lib/utils';\n  import { useBrokerageAccount } from '$lib/wrappers';\n  import { fromNano } from '@ton/core';\n  import { writable } from 'svelte/store';\n  import Output from '../../components/Output.svelte';\n  import Section from './Section.svelte';\n\n  const brokerageAddress = writable('');\n  const brokerageAccount = useBrokerageAccount(brokerageAddress);\n\n  let output = $state<{ date: string; message: string }[]>([]);\n</script>\n\n<Section title=\"Brokerage Account\">\n  <Label class=\"grid gap-2 mt-4\">\n    Brokerage Address\n    <Input\n      type=\"text\"\n      placeholder=\"0QDCiYqpPo9esMDX35_BWYcsR1NKS7lbnPcPF6IMH8MNx2Lj\"\n      class=\"w-fit\"\n      bind:value={$brokerageAddress}\n    />\n  </Label>\n  <p class=\"mt-3 mb-8 text-ds-gray-900 max-w-[640px]\">\n    Sets up and manages brokerage accounts. Initializes with brokerage and trader addresses, ensures\n    the sender is authorized, and notifies deployment success. Tracks storage reserves and handles\n    account-related requests while validating access.\n  </p>\n  <div class=\"flex gap-4 items-end overflow-x-auto snap-x snap-mandatory\">\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        const result = await $brokerageAccount.getBrokerage();\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result.toString({ testOnly: true }), null, 2)\n        });\n      }}>Get Brokerage</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        const result = await $brokerageAccount.getTrader();\n\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(result.toString({ testOnly: true }), null, 2)\n        });\n      }}>Get Trader</Button\n    >\n\n    <Button\n      class=\"bg-ds-purple-800 snap-start text-white hover:bg-ds-purple-700\"\n      onclick={async () => {\n        const result = await $brokerageAccount.getStorageReserve();\n\n        output.unshift({\n          date: formatOutputDate(new Date()),\n          message: JSON.stringify(`${fromNano(result)} TON`, null, 2)\n        });\n      }}>Get Storage Reserve</Button\n    >\n  </div>\n\n  <Output bind:output />\n</Section>\n"],"names":["brokerageAddress","writable","brokerageAccount","useBrokerageAccount","output","$.source","$.proxy","$brokerageAddress","result","$brokerageAccount","$.get","formatOutputDate","fromNano"],"mappings":";;6QAWQA,EAAmBC,EAAS,EAAE,EAC9BC,EAAmBC,EAAoBH,CAAgB,EAEzD,IAAAI,EAAAC,EAAAC,EAAA,CAAA,CAAA,CAAA,0QAUYC,EAAiB,iMAYrBC,EAAM,MAASC,EAAiB,EAAC,aAAY,EACnDC,EAAAN,CAAM,EAAC,QAAO,CACZ,KAAMO,EAAgB,IAAK,IAAI,EAC/B,QAAS,KAAK,UAAUH,EAAO,SAAQ,CAAG,SAAU,EAAS,CAAA,EAAA,KAAM,CAAC,mLAQhEA,EAAM,MAASC,EAAiB,EAAC,UAAS,EAEhDC,EAAAN,CAAM,EAAC,QAAO,CACZ,KAAMO,EAAgB,IAAK,IAAI,EAC/B,QAAS,KAAK,UAAUH,EAAO,SAAQ,CAAG,SAAU,EAAS,CAAA,EAAA,KAAM,CAAC,mLAQhEA,EAAM,MAASC,EAAiB,EAAC,kBAAiB,EAExDC,EAAAN,CAAM,EAAC,QAAO,CACZ,KAAMO,EAAgB,IAAK,IAAI,EAC/B,QAAS,KAAK,UAAS,GAAIC,EAAAA,SAASJ,CAAM,CAAA,OAAS,KAAM,CAAC"}