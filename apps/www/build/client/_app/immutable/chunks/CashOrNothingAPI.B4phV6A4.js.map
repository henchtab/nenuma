{"version":3,"file":"CashOrNothingAPI.B4phV6A4.js","sources":["../../../../../../src/routes/playground/options-api/components/CashOrNothingAPI.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  import { formatOutputDate, formatTime } from '$lib/utils';\n  import { createCashOrNothingOption } from '$lib/wrappers';\n  import { Address, fromNano } from '@ton/core';\n  import clsx from 'clsx';\n  import { toast } from 'svelte-sonner';\n  import { derived, writable } from 'svelte/store';\n  import Output from '../../components/Output.svelte';\n  import Section from './Section.svelte';\n\n  const streamAddress = writable('');\n  const option = createCashOrNothingOption(streamAddress);\n\n  const shouldDisableActions = derived([streamAddress], ([$streamAddress]) => !$streamAddress);\n\n  let output = $state<{ date: string; message: string }[]>([]);\n\n  function formatOutput(input: {\n    type: 'coins' | 'object' | 'address' | 'timestamp' | 'other';\n    value: bigint | object | Address | null;\n  }) {\n    if (input.value === null) {\n      return 'Empty response.';\n    }\n\n    if (input.type === 'coins') {\n      return fromNano(input.value as bigint).toString();\n    }\n\n    if (input.type === 'timestamp') {\n      return formatTime(new Date(Number(input.value) * 1000));\n    }\n\n    if (input.type === 'object') {\n      return JSON.stringify(\n        input.value,\n        (_, v) => {\n          if (v instanceof Address) {\n            return v.toString({ testOnly: true, bounceable: false });\n          }\n\n          if (typeof v === 'bigint') {\n            return v.toString();\n          }\n\n          return v;\n        },\n        2\n      );\n    }\n\n    if (input.type === 'address') {\n      return (input.value as Address).toString({\n        testOnly: true,\n        bounceable: false\n      });\n    }\n\n    return input.value.toString();\n  }\n\n  function postToOutput(message: string) {\n    output.unshift({ date: formatOutputDate(new Date()), message });\n  }\n</script>\n\n<Section title=\"Cash-or-Nothing Option\">\n  <div class=\"grid gap-3 mt-4\">\n    <Label class=\"grid gap-2\">\n      Stream Address\n      <Input\n        type=\"text\"\n        name=\"streamAddress\"\n        placeholder=\"0QDCiYqpPo9esMDX35_BWYcsR1NKS7lbnPcPF6IMH8MNx2Lj\"\n        required\n        class=\"w-fit\"\n        bind:value={$streamAddress}\n      />\n    </Label>\n  </div>\n  <p class=\"mt-3 mb-8 text-ds-gray-900 max-w-[640px]\">\n    This smart contract manages \"cash-or-nothing\" options. It handles deployment, validates\n    agreements, monitors market data, and determines if an option is \"in,\" \"out,\" or \"at\" the money\n    at expiration, sending notifications and payouts accordingly.\n  </p>\n\n  <div class=\"flex mt-8 gap-4 items-end overflow-x-auto pb-6 snap-x snap-mandatory\">\n    <a\n      class={clsx('snap-start', $shouldDisableActions && 'cursor-not-allowed')}\n      href={$shouldDisableActions\n        ? undefined\n        : `/playground/options-api/deploy?contract=option&title=${encodeURIComponent('Cash-or-Nothing Option')}&subtitle=option&stream=${$streamAddress}`}\n    >\n      <Button\n        class=\"bg-ds-teal-800 hover:bg-ds-teal-700 text-white\"\n        disabled={$shouldDisableActions}>Deploy Option</Button\n      >\n    </a>\n\n    <!-- TODO: Allow the user to provide queryId -->\n    <Button\n      class=\"bg-ds-teal-800 hover:bg-ds-teal-700 text-white snap-start\"\n      disabled={$shouldDisableActions}\n      onclick={async () => await $option.checkTimeout({ queryId: BigInt(Date.now()) })}\n      >Check Timeout</Button\n    >\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getOptionId();\n          postToOutput(\n            formatOutput({\n              type: 'other',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Option ID\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getAgreement();\n          postToOutput(\n            formatOutput({\n              type: 'object',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Agreement\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getStrikePrice();\n          postToOutput(\n            formatOutput({\n              type: 'other',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Strike Price\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getLatestCandlestick();\n          postToOutput(\n            formatOutput({\n              type: 'object',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Latest Candlestick\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getExpiration();\n          postToOutput(\n            formatOutput({\n              type: 'timestamp',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Expiration\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getBalance();\n          postToOutput(\n            formatOutput({\n              type: 'coins',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Balance\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getDeployerAddress();\n          postToOutput(\n            formatOutput({\n              type: 'address',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Deployer Address\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getStreamAddress();\n          postToOutput(\n            formatOutput({\n              type: 'address',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Stream Address\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getSessionAddress();\n          postToOutput(\n            formatOutput({\n              type: 'address',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Session Address\n    </Button>\n\n    <Button\n      class=\"bg-ds-blue-800 hover:bg-ds-blue-700 snap-start text-white\"\n      disabled={$shouldDisableActions}\n      onclick={async () => {\n        try {\n          const result = await $option.getNotificationsCount();\n          postToOutput(\n            formatOutput({\n              type: 'other',\n              value: result\n            })\n          );\n        } catch (error) {\n          toast.error('Option has not been deployed or it has expired.');\n        }\n      }}\n    >\n      Get Notifications Count\n    </Button>\n  </div>\n\n  <Output bind:output />\n</Section>\n"],"names":["streamAddress","writable","option","createCashOrNothingOption","shouldDisableActions","derived","$streamAddress","output","$.source","$.proxy","formatOutput","input","fromNano","formatTime","_","v","Address","postToOutput","message","formatOutputDate","$.template_effect","$.set_class","a","clsx","$shouldDisableActions","$.set_attribute","$option","result","toast"],"mappings":"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"}